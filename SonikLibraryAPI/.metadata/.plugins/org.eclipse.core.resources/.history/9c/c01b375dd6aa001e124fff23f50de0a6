/*
 * SonikMathDistance.cpp
 *
 *  Created on: 2015/08/17
 *      Author: SONIK
 */

#include "SonikMathDistance.h"
#include "SonikMathStandard.h"

#include <stdint.h>
#include <new>

namespace SonikMath
{
	//=====================================
	//					Sonik3DPoint Implement
	//=====================================
	Sonik3DPoint::Sonik3DPoint(double _x_, double _y_, double _z_)
	:m_x(_x_)
	,m_y(_y_)
	,m_z(_z_)
	{

	};

	Sonik3DPoint::~Sonik3DPoint(void)
	{

	};

	//本クラスと引数で指定されたオブジェクト或いは座標との距離を算出します。
	double Sonik3DPoint::Distance(const Sonik3DPoint& _point_)
	{
		double _distance[3];

		_distance[0] = _point_.m_x - m_x;
		_distance[1] = _point_.m_y - m_y;
		_distance[2] = _point_.m_z - m_z;

		return SonikMath::sqrt( _distance[0] * _distance[0] + _distance[1] * _distance[1] + _distance[2] * _distance[2]);

	};
	double Sonik3DPoint::Distance(const double& _x_, const double& _y_, const double& _z_)
	{
		double _distance[3];

		_distance[0] = _x_ - m_x;
		_distance[1] = _y_ - m_y;
		_distance[2] = _z_ - m_z;

		return SonikMath::sqrt( _distance[0] * _distance[0] + _distance[1] * _distance[1] + _distance[2] * _distance[2]);

	};

	double Sonik3DPoint::Distance(const double _x_, const double _y_, const double _z_)
	{

		double _distance[3];

		_distance[0] = _x_ - m_x;
		_distance[1] = _y_ - m_y;
		_distance[2] = _z_ - m_z;

		return SonikMath::sqrt( _distance[0] * _distance[0] + _distance[1] * _distance[1] + _distance[2] * _distance[2]);
	};


	//=====================================
	//					SonikBazierBox Implement
	//=====================================
	SonikBazierBox::SonikBazierBox(double _x_, double _y_, double _endx_, double _endy_, double _pivx_, double  _pivy_, unsigned long _ef_, bool AllFlameSaved)
	:StartX(_x_)
	,StartY(_y_)
	,EndX(_endx_)
	,EndY(_endy_)
	,PivotX(_pivx_)
	,PivotY(_pivy_)
	,Elapsed_Frame(_ef_)
	,m_saved_result_X(nullptr)
	,m_saved_result_Y(nullptr)
	{
		if( !AllFlameSaved )
		{
			return;
		};

		if(_ef_ == UINT32_MAX)
		{
			throw "フレーム数限界値オーバー：UINT32_MAXより小さい値を指定してください。";
		};

		try
		{
			m_saved_result_X = new double[Elapsed_Frame];
			m_saved_result_Y = new double[Elapsed_Frame];
		}catch(std::bad_alloc& e)
		{
			if(m_saved_result_X != nullptr)
			{
				delete[] m_saved_result_X;
				m_saved_result_X = nullptr;
			};

			throw std::bad_alloc(e);
		};

		double _getx;
		double _gety;
		for(uint32_t i=0; i < Elapsed_Frame; ++i)
		{
			Bezier_curveLine(_getx, _gety, i);
			m_saved_result_X[i] = _getx;
			m_saved_result_Y[i] = _gety;
		};

	};
	SonikBazierBox::~SonikBazierBox(void)
	{
		if( m_saved_result_X != nullptr )
		{
			delete[] m_saved_result_X;
		};

		if( m_saved_result_Y != nullptr )
		{
			delete[] m_saved_result_Y;
		};

	};

	//2次元のペジェ曲線に必要な情報を設定します。
	//引数最後のフラグは、先に計算を実施し、すべてのフレームの結果を保持しておくかどうかを設定します。(フレーム数 * doubleサイズ)分のメモリを使います。
	void SonikBazierBox::SetValue(double _x_, double _y_, double _endx_, double _endy_, double _pivx_, double  _pivy_, unsigned long _ef_, bool AllFlameSaved)
	{
		StartX = _x_;
		StartY = _y_;
		EndX = _endx_;
		EndY = _endy_;
		PivotX = _pivx_;
		PivotY = _pivy_;
		Elapsed_Frame = _ef_;
	};

	//2次のベジェ曲線の位置点を算出します。
	//引数1: 結果であるX値を格納するために変数を指定します。
	//引数2: 結果であるY値を格納するために変数を指定します。
	//引数3: 始点から終点までの総合フレームの中で、何フレーム目の値を取得するのかを指定します。
	void SonikBazierBox::Bezier_curveLine(double& GetX, double& GetY, unsigned long GetFrame);


	//ベジェ曲線の位置点を算出します。(float版)
	//引数1: ベジェ曲線の設定クラスである、BazierBoxクラスに任意の値を設定して指定します。
	//引数2: 結果であるX値を格納するために変数を指定します。
	//引数3: 結果であるY値を格納するために変数を指定します。
	//引数4: 始点から終点までの総合フレームの中で、何フレーム目の値を取得するのかを指定します。
	void Bezier_curveLineF(const SonikMathDataBox::BazierBoxF& StateBox, float& GetX, float& GetY, float GetFrame)
	{
		float time = 0.0f;

		if(StateBox.Elapsed_Frame < GetFrame)
		{
			time = 1.0f;
		}else
		{
			time = GetFrame * (1 * StateBox.Elapsed_Frame);
		};

		GetX = ((1.0f - time) * (1.0f - time) * StateBox.StartX) + (2 * (1.0f - time) * time * StateBox.PivotX) + (time * time * StateBox.EndX);
		GetY = ((1.0f - time) * (1.0f - time) * StateBox.StartY) + (2 * (1.0f - time) * time * StateBox.PivotY) + (time * time * StateBox.EndY);
	};


};

