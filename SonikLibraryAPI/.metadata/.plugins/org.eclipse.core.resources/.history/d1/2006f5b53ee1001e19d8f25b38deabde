/*
 * SonikDllAccessManager.h
 *
 *  Created on: 2019/02/16
 *      Author: SONIK
 */

#ifndef SONIKDLLACCESSMANAGER_H_
#define SONIKDLLACCESSMANAGER_H_

#include <map>
#include <stdint.h>
#include "../SonikString/SonikString.h"
#include "../SmartPointer/SonikSmartPointer.hpp"

#if defined(_WIN32) || defined(_WIN64)
#include <windows.h>
using SONIK_DLL_ACCESS_MANAGER_POINTER = HINSTANCE__*;

#elif defined(__linux__)
typedef void* SONIK_DLL_ACCESS_MANAGER_POINTER;

#endif

namespace SonikDllOptions
{
	class SonikDllObject
	{
	public:
		//Constructor
		SonikDllObject(void)
		{
			//no process;
		};

		//Destructor
		virtual ~SonikDllObject(void)
		{
			//no process;
		};

		//pure functions
		virtual uintptr_t GetDllProcAddress(const char* ProcName)=0;
		virtual uintptr_t GetDllProcAddress(const char16_t* ProcName)=0;
		virtual uintptr_t GetDllProcAddress(const wchar_t* ProcName)=0;
	};

namespace SonikLib
{
	using SDllHandle = SonikLib::SharedSmtPtr<SonikDllOptions::SonikDllObject> ;

	class SonikDllHandleManager
	{
		typedef std::map<SonikLib::SonikString, SONIK_DLL_ACCESS_MANAGER_POINTER> maptype;
	private:
		maptype DllHandleList;
		//InnerClass
		class DllObjectImple;

	private:
		//constructor
		SonikDllHandleManager(void);

		//copy constructor
		SonikDllHandleManager(const SonikDllHandleManager& t_his);

		//override operator equal
		SonikDllHandleManager& operator =(const SonikDllHandleManager& t_his);

	public:
		//Destructor
		~SonikDllHandleManager(void);

		//Singleton Instance Access
		static SonikDllHandleManager& Instance(void);

		bool DllGetLoad(const char* _DllPath_, SDllHandle& _GetDllObject);
		bool DllGetLoad(const char16_t* _DllPath_, SDllHandle& _GetDllObject);

		bool DllLoad(const char* _DllPath_, const char* SetFind_DllName, const char* RegisterName);
		bool DllLoad(const char16_t* _DllPath_, const char16_t* SetFind_DllName, const char16_t* RegisterName);

		void FreeDll(const char* FindDllName);
		void FreeDll(const char16_t* FindDllName);

		uintptr_t GetDllProcAddress(SONIK_DLL_ACCESS_MANAGER_POINTER dllhandle, const char* ProcName);
		uintptr_t GetDllProcAddress(SONIK_DLL_ACCESS_MANAGER_POINTER dllhandle, const char16_t* ProcName);

		SONIK_DLL_ACCESS_MANAGER_POINTER GetHandle(const char* FindDllName);

		SONIK_DLL_ACCESS_MANAGER_POINTER GetHandle(char16_t* FindDllName);

	};

};



#endif /* SONIKDLLACCESSMANAGER_H_ */
