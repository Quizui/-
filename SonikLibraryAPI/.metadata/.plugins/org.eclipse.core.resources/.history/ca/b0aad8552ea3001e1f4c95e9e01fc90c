/*
 * SonikSmartPointer.h
 *
 *  Created on: 2017/10/10
 *      Author: SONIK
 */

#ifndef SMARTPOINTER_SONIK_SMARTPOINTER_HPP_
#define SMARTPOINTER_SONIK_SMARTPOINTER_HPP_

#include <stdint.h>
#include <atomic>
#include <new>

namespace SonikLib
{
	//最低限のスマートポインタ
	//配列のポインタを指定した場合の動作は未定義です。（ていうか判別できぬ。)
	template <class pType, std::enable_if_t<!std::is_pointer_v<pType>, bool> = true>
	class NormalSmtPtr
	{
	private:
		pType* m_Pointer;

		std::atomic<unsigned int>* m_Count;

	private:
		void AddRef(void)
		{
			unsigned int TmpCnt = m_Count->load(std::memory_order_acquire);
			while( !m_Count->compare_exchange_strong(TmpCnt, TmpCnt+1, std::memory_order_acq_rel) )
			{
				//no process
			};

		};

		void Release(void)
		{
			unsigned int TmpCnt = m_Count->load(std::memory_order_acquire);
			while( !m_Count->compare_exchange_strong(TmpCnt, TmpCnt-1, std::memory_order_acq_rel) )
			{
				//no process
			};


			if( (TmpCnt -1) == 0 )
			{
				delete m_Pointer;
				delete m_Count;

				m_Pointer = nullptr;
				m_Count = nullptr;
			};

		};

	public:

		//constructor
		explicit NormalSmtPtr(pType* Pointer = nullptr)
		:m_Pointer(nullptr)
		,m_Count(nullptr)
		{

			try
			{
				m_Count = new std::atomic<unsigned int>;
			}catch(std::bad_alloc& e)
			{
				throw std::bad_alloc(e);
			}

			m_Count->store(1);
			m_Pointer = Pointer;

		};

		//コピーコンストラクタ
		NormalSmtPtr(const NormalSmtPtr<pType>& SmtPtr)
		{
			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;

			AddRef();

		};

		//Moveコンストラクタ
		NormalSmtPtr(NormalSmtPtr<pType>&& SmtPtr)
		{
			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;

			SmtPtr.m_Pointer = nullptr;
			SmtPtr.m_Count = nullptr;

		};

		//Destructor
		~NormalSmtPtr(void)
		{
			Release();
		};

        //MoveEqual
		NormalSmtPtr& operator =(NormalSmtPtr<pType>&& SmtPtr)
		{
			//自身への代入は意味が無いので行わない。
			if( SmtPtr.m_Pointer == m_Pointer )
			{
				return (*this);
			};

			Release();

			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;

			AddRef();

			return (*this);

		};


		NormalSmtPtr& operator =(const NormalSmtPtr<pType>& SmtPtr)
		{
			//自身への代入は意味が無いので行わない。
			if( SmtPtr.m_Pointer == m_Pointer )
			{
				return (*this);
			};

			Release();

			m_Count = SmtPtr.m_Count;
			m_Pointer = SmtPtr.m_Pointer;

			AddRef();

			return (*this);
		};

		bool operator ==(const NormalSmtPtr<pType>& SmtPtr)
		{
			if( m_Pointer == SmtPtr.m_Pointer )
			{
				return true;
			};

			return false;
		};

		bool operator ==(const uintptr_t PtrVal)
		{
			if( static_cast<uintptr_t>(m_Pointer) == PtrVal )
			{
				return true;
			};

			return false;
		};

		bool operator ==(const void* Ptrs)
		{
			if( m_Pointer == Ptrs )
			{
				return true;
			};

			return false;
		};

		void ResetPointer(pType* SetPointer = nullptr)
		{
			Release();

			//再初期化
            m_Count = new std::atomic<unsigned int>;
            m_Count->store(1);

            m_Pointer = SetPointer;;
		};

		pType* operator ->(void)
		{
			return m_Pointer;

		};
	};

	//最低限の配列用スマートポインタ
	//配列は確保時に初期化されます。
	template <class ArrayType>
	class NormalArraySmtPtr
	{
	private:
		ArrayType* m_Pointer;
		uint64_t m_arraysize;

		std::atomic<unsigned int>* m_Count;


	private:
		void AddRef(void)
		{
			unsigned int TmpCnt = m_Count->load(std::memory_order_acquire);
			while( !m_Count->compare_exchange_strong(TmpCnt, TmpCnt+1, std::memory_order_acq_rel) )
			{
				//no process
			};

		};

		void Release(void)
		{
			unsigned int TmpCnt = m_Count->load(std::memory_order_acquire);
			while( !m_Count->compare_exchange_strong(TmpCnt, TmpCnt-1, std::memory_order_acq_rel) )
			{
				//no process
			};


			if( (TmpCnt -1) == 0 )
			{
				delete[] m_Pointer;
				delete m_Count;

				m_Pointer = nullptr;
				m_Count = nullptr;
				m_arraysize = 0;
			};

		};

	public:

		//constructor
		explicit NormalArraySmtPtr(uint64_t ArraySize)
		:m_Pointer(nullptr)
		,m_arraysize(ArraySize)
		,m_Count(nullptr)
		{

			try
			{
				m_Pointer = new ArrayType[m_arraysize];
				m_Count = new std::atomic<unsigned int>;
			}catch(std::bad_alloc& e)
			{
				if(m_Pointer != nullptr)
				{
					delete m_Pointer;
				};

				if(m_Count != nullptr)
				{
					delete m_Count;
				};

				throw std::bad_alloc(e);

			}catch(std::bad_array_new_length& e)
			{
				if(m_Pointer != nullptr)
				{
					delete m_Pointer;
				};

				if(m_Count != nullptr)
				{
					delete m_Count;
				};

				throw std::bad_array_new_length(e);
			};

			m_Count->store(1);
		};

		//コピーコンストラクタ
		NormalArraySmtPtr(const NormalArraySmtPtr<ArrayType>& SmtPtr)
		{
			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;
			m_arraysize = SmtPtr.m_arraysize;

			AddRef();

		};

		//Moveコンストラクタ
		NormalArraySmtPtr(NormalArraySmtPtr<ArrayType>&& SmtPtr)
		{
			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;
			m_arraysize = SmtPtr.m_arraysize;

			SmtPtr.m_Pointer = nullptr;
			SmtPtr.m_Count = nullptr;

		};

		//Destructor
		~NormalArraySmtPtr(void)
		{
			Release();
		};

        //MoveEqual
		NormalArraySmtPtr& operator =(NormalArraySmtPtr<ArrayType>&& SmtPtr)
		{
			//自身への代入は意味が無いので行わない。
			if( SmtPtr.m_Pointer == m_Pointer )
			{
				return (*this);
			};

			Release();

			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;
			m_arraysize = SmtPtr.m_arraysize;

			AddRef();

			return (*this);

		};


		NormalArraySmtPtr& operator =(const NormalArraySmtPtr<ArrayType>& SmtPtr)
		{
			//自身への代入は意味が無いので行わない。
			if( SmtPtr.m_Pointer == m_Pointer )
			{
				return (*this);
			};

			Release();

			m_Count = SmtPtr.m_Count;
			m_Pointer = SmtPtr.m_Pointer;
			m_arraysize = SmtPtr.m_arraysize;

			AddRef();

			return (*this);
		};

		bool operator ==(const NormalArraySmtPtr<ArrayType>& SmtPtr)
		{
			if( m_Pointer == SmtPtr.m_Pointer )
			{
				return true;
			};

			return false;
		};

		void ResetPointer(uint64_t ReAllocSize)
		{
			Release();

			//再初期化
			m_Pointer = nullptr;
			m_Count = nullptr;
			m_arraysize = 0;
			try
			{
				m_Pointer = new ArrayType[ReAllocSize];
				m_Count = new std::atomic<unsigned int>;
			}catch(std::bad_alloc& e)
			{
				if(m_Pointer != nullptr)
				{
					delete m_Pointer;
				};

				if(m_Count != nullptr)
				{
					delete m_Count;
				};

				throw std::bad_alloc(e);

			}catch(std::bad_array_new_length& e)
			{
				if(m_Pointer != nullptr)
				{
					delete m_Pointer;
				};

				if(m_Count != nullptr)
				{
					delete m_Count;
				};

				throw std::bad_array_new_length(e);
			};

            m_Count->store(1);
            m_arraysize = ReAllocSize;
		};

		const ArrayType& operator[](uint64_t index) const
		{
			return m_Pointer[index];
		}

		ArrayType& operator[](uint64_t index)
		{
			return m_Pointer[index];
		};


	};

};




#endif /* SMARTPOINTER_SONIK_SMARTPOINTER_HPP_ */
