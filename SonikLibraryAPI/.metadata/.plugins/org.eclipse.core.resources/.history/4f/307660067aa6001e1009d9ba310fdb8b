/*
 * SonikWorkThreadEx.cpp
 *
 *  Created on: 2015/09/23
 *      Author: SONIK
 */

#include "SonikWorkThreadEx.h"

#include "../FunctionObject/FunctionObjectSystemInterface.hpp"
#include "../SonikCAS/SonikAtomicLock.h"

#include <thread>
#include <new>
#include <condition_variable>

//限定特殊化=======================
namespace SonikLib
{
	template<>
	class NormalSmtPtr<SonikLib::SonikFOSInterface>
	{
	private:
		SonikLib::SonikFOSInterface* m_Pointer;

		std::atomic<unsigned int>* m_Count;

	private:
		void AddRef(void)
		{
			unsigned int TmpCnt = m_Count->load(std::memory_order_acquire);
			while( !m_Count->compare_exchange_strong(TmpCnt, TmpCnt+1, std::memory_order_acq_rel) )
			{
				//no process
			};

		};

		void Release(void)
		{
			unsigned int TmpCnt = m_Count->load(std::memory_order_acquire);
			while( !m_Count->compare_exchange_strong(TmpCnt, TmpCnt-1, std::memory_order_acq_rel) )
			{
				//no process
			};


			if( (TmpCnt -1) == 0 )
			{
				delete m_Pointer;
				delete m_Count;

			};

			m_Pointer = nullptr;
			m_Count = nullptr;
		};

	public:

		//constructor
		explicit NormalSmtPtr(SonikLib::SonikFOSInterface* Pointer = nullptr)
		:m_Pointer(nullptr)
		,m_Count(nullptr)
		{

			try
			{
				m_Count = new std::atomic<unsigned int>;
			}catch(std::bad_alloc& e)
			{
				throw std::bad_alloc(e);
			}

			m_Count->store(1);
			m_Pointer = Pointer;

		};

		//コピーコンストラクタ
		NormalSmtPtr(const NormalSmtPtr<SonikLib::SonikFOSInterface>& SmtPtr)
		{
			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;

			AddRef();

		};

		//Moveコンストラクタ
		NormalSmtPtr(NormalSmtPtr<SonikLib::SonikFOSInterface>&& SmtPtr)
		{
			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;

			SmtPtr.m_Pointer = nullptr;
			SmtPtr.m_Count = nullptr;

		};

		//Destructor
		~NormalSmtPtr(void)
		{
			Release();
		};

        //MoveEqual
		NormalSmtPtr& operator =(NormalSmtPtr<SonikLib::SonikFOSInterface>&& SmtPtr)
		{
			//自身への代入は意味が無いので行わない。
			if( SmtPtr.m_Pointer == m_Pointer )
			{
				return (*this);
			};

			Release();

			m_Pointer = SmtPtr.m_Pointer;
			m_Count = SmtPtr.m_Count;

			AddRef();

			return (*this);

		};


		NormalSmtPtr& operator =(const NormalSmtPtr<SonikLib::SonikFOSInterface>& SmtPtr)
		{
			//自身への代入は意味が無いので行わない。
			if( SmtPtr.m_Pointer == m_Pointer )
			{
				return (*this);
			};

			Release();

			m_Count = SmtPtr.m_Count;
			m_Pointer = SmtPtr.m_Pointer;

			AddRef();

			return (*this);
		};

		bool operator ==(const NormalSmtPtr<SonikLib::SonikFOSInterface>& SmtPtr)
		{
			if( m_Pointer == SmtPtr.m_Pointer )
			{
				return true;
			};

			return false;
		};

		bool operator ==(const uintptr_t PtrVal)
		{
			if( reinterpret_cast<uintptr_t>(m_Pointer) == PtrVal )
			{
				return true;
			};

			return false;
		};

		bool operator ==(const void* Ptrs)
		{
			if( m_Pointer == Ptrs )
			{
				return true;
			};

			return false;
		};

		void ResetPointer(SonikLib::SonikFOSInterface* SetPointer = nullptr)
		{
			Release();

			//再初期化
            m_Count = new std::atomic<unsigned int>;
            m_Count->store(1);

            m_Pointer = SetPointer;;
		};

		//nullptrならtrue返却
		bool NullPtrCheck(void)
		{
			return (m_Pointer == nullptr) ? true : false;
		}

		//deleteしないこと。
		SonikLib::SonikFOSInterface* GetRawPointer(void)
		{
			return m_Pointer;
		};

		SonikLib::SonikFOSInterface* operator ->(void)
		{
			return m_Pointer;

		};

		SonikLib::SonikFOSInterface& operator*(void) const noexcept
		{
			return (*m_Pointer);
		};

	};

};


namespace SonikLib
{

	//クラス定義=====================================
	//WorkThred本体
	class WorkThreadEx::pImplEx
	{
	private:
		//スレッドオブジェクト
		std::thread threads_;

		//実際にコールする関数オブジェクト
		SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface> FuncObj_;


		//関数パックのキューオブジェクトへのポインタ
		SonikLib::SonikAtomicQueue<SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>>* FuncQueue_;

		//CASロックオブジェクト
		SonikLib::S_CAS::SonikAtomicLock atmlock_;

		//静的関数で使う、条件変数
		std::condition_variable_any cond_;

		//1ビット目(0x01): 静的関数終了フラグ
		//3ビット目(0x04): セット関数の終了フラグ(途中でセット内容を変えたい場合に使用。)
		//		       					ただし、セットしてある関数が終了しないと本フラグは意味をなさない。
		//4ビット目(0x08): デキュー停止フラグ。キューのアンセットに使用します。
		//5ビット目(0x10): スレッドが処理するジョブがなくて休止状態であるかどうか。
		//6ビット目(0x20): 各フラグのセット通知(一括変更通知でないと特定タイミングでフラグが無視されるため)
		uint32_t ThreadFlag;

		bool DetachFlag;

	private:
		static void SonikWorkThreadMainEx( WorkThreadEx::pImplEx* ClassObject);

	public:
		//コンストラクタです。
		pImplEx(bool DetachThread);

		//デストラクタ
		~pImplEx(void);

		//コールする関数オブジェクトをセットします。
		bool SetCallFunction(SonikLib::SonikFOSInterface* CallFunctionObject, bool _looped_ = false);
		bool SetCallFunction(SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>& CallFunctionObject, bool _looped_ = false);

		//静的関数内で使用
		SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>& GetFunctionPointer(void);
		std::condition_variable_any& GetConditionVariable(void);
		SonikLib::S_CAS::SonikAtomicLock& GetCASLockObject(void);
		uint32_t& GetThreadFlag(void);
		//キューのあんせっと
		void InnerUnsetQueue(void);



		//キューポインタが設定されていればデキューを行います。
		void UpdateQueue(void);

		//外部からコールする関数
		//スレッド終了フラグのセット
		void SetThreadExitFlag(bool Setflag);
		//関数コールループフラグのセット。
		void SetChangeFuntionCallLoopFlag(bool Setflag);
		//セット関数の終了フラグ(途中でセット内容を変えたい場合に使用。)
		void SetChangeSetFuncFlag(bool Setflag);
		//キューアンセットフラグのセット
		void SetQueueUnsetFlag(bool Setflag);
		//サスペンド状態かどうかのフラグセット
		void SetThreadStatus_Suspend(bool Setfalg);

		//キューポインタをセットします。
		void SetFunctionQueue(SonikLib::SonikAtomicQueue<SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>>* pSetQueue);
		//キューポインタをアンセットします。
		void UnSetFunctionQueue(void);

	};

	//静的メソッドの定義
	void WorkThreadEx::pImplEx::SonikWorkThreadMainEx(WorkThreadEx::pImplEx* ClassObject)
	{
		uint32_t& RefFlag = ClassObject->GetThreadFlag();
		std::condition_variable_any& RefCond = ClassObject->GetConditionVariable();
		SonikLib::S_CAS::SonikAtomicLock& RefLock = ClassObject->GetCASLockObject();
		std::mutex localmtx;
		SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>& RefFuncObj = ClassObject->GetFunctionPointer();
		SonikLib::SonikFOSInterface* pRawFunc = RefFuncObj.GetRawPointer();

		while(1)
		{
			if(pRawFunc == nullptr)
			{
					//condition_variable_anyのwaitで使用。
					std::unique_lock<std::mutex> lock(localmtx);
					//RefFuncが0以外になればロック解除。
					//ラムダ式使用。
					RefCond.wait(lock,
										   [&RefFuncObj, &ClassObject, &RefFlag]
										   {
												//ThreadMainEx関数終了フラグか、デキュー停止フラグが立っていればサスペンド解除し、後続の処理へ。。
												if( ((RefFlag & 0x08) != 0) || ((RefFlag & 0x01) != 0) )
												{
													ClassObject->SetThreadStatus_Suspend(false);
													return true;
												};

												//関数(タスク)取得
												ClassObject->UpdateQueue();

												//取れてたらサスペンド解除して後続処理へ。
												if( !RefFuncObj.NullPtrCheck() )
												{
													pRawFunc = RefFuncObj.GetRawPointer();
													ClassObject->SetThreadStatus_Suspend(false) ;
													return true;
												};

												//取れなければサスペンド状態にして再度最初からチェック。
												ClassObject->SetThreadStatus_Suspend(true) ;
												return false;
											}
								);
			};

			if( (RefFlag & 0x08) != 0 )
			{
				ClassObject->InnerUnsetQueue();
				//関数終了フラグも立っていればそのままbreak処理。
				if( (RefFlag & 0x01) != 0 )
				{
					break; //while(1) break;
				};
			};

			//関数終了なら総合処理へ。
			if( (RefFlag & 0x01) != 0 )
			{
				break;
			};

			//指定された関数コール。
			pRawFunc->Run();

			/*ファンクションの変更フラグが立っていれば、再生終了後、保持してるポインタ値を破棄*/
			if((RefFlag & 0x04) != 0)
			{
				pRawFunc = nullptr;
				RefFuncObj.ResetPointer(nullptr);
				RefFlag &= (~0x04);
			};

			RefLock.Unlock();

		};

		//総合終了===================
		RefFuncObj.ResetPointer(nullptr);
		RefLock.Unlock();

	};

	//クラス実装=============================================
	WorkThreadEx::pImplEx::pImplEx(bool DetachThread)
	:threads_(&WorkThreadEx::pImplEx::SonikWorkThreadMainEx, this)
	,FuncQueue_(0)
	,ThreadFlag(0)
	,DetachFlag(DetachThread)

	{
		if( DetachThread )
		{
			threads_.detach();
		};


	};

	//デストラクタ
	WorkThreadEx::pImplEx::~pImplEx(void)
	{
		SetThreadExitFlag(true);
		cond_.notify_one();

		if( !DetachFlag )
		{
			threads_.join();
		};

	};

	//コールする関数オブジェクトをセットします。
	//本関数は成功した場合、スレッドにセットされた関数が終了するまで、再セットは行いません。
	bool WorkThreadEx::pImplEx::SetCallFunction(SonikLib::SonikFOSInterface* CallFunctionObject, bool _looped_)
	{
		if( !atmlock_.TryLock() )
		{
			return false;
		};

		if( FuncQueue_ != 0 )
		{
			return false;
		};

		if( CallFunctionObject == nullptr )
		{
			return false;
		};


		//セット
		FuncObj_.ResetPointer(CallFunctionObject);
		SetChangeSetFuncFlag(_looped_);
		cond_.notify_one();
		//ミューテックスのアンロックは静的関数内で行う。
		return true;

	};

	bool WorkThreadEx::pImplEx::SetCallFunction(SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>& CallFunctionObject, bool _looped_)
	{
		if( !atmlock_.TryLock() )
		{
			return false;
		};

		if( FuncQueue_ != 0 )
		{
			return false;
		};

		if( CallFunctionObject.NullPtrCheck() )
		{
			return false;
		};

		//セット
		FuncObj_ = CallFunctionObject;
		SetChangeSetFuncFlag(_looped_);
		cond_.notify_one();
		//ミューテックスのアンロックは静的関数内で行う。
		return true;
	};

	SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>& WorkThreadEx::pImplEx::GetFunctionPointer(void)
	{
		return FuncObj;
	};

	std::condition_variable_any& WorkThreadEx::pImplEx::GetConditionVariable(void)
	{
		return cond_;
	};

	SonikLib::S_CAS::SonikAtomicLock& WorkThreadEx::pImplEx::GetCASLockObject(void)
	{
		return atmlock_;
	};

	uint32_t& WorkThreadEx::pImplEx::GetThreadFlag(void)
	{
		return ThreadFlag;
	};

	//キューポインタが設定されていればデキューを行います。
	void WorkThreadEx::pImplEx::UpdateQueue(void)
	{
		if( FuncQueue_ == 0 )
		{
			return;
		};

//		FuncQueue_->DeQueue(Access_);
//
//		if( Access_ != nullptr )
//		{
//			FuncObj.SmtPtrFunc = Access_->SmtPtrFunc;
//
//			Access_.~NormalSmtPtr();
//			SetFunctionDeleteFlag(true);
//		};
	};

	//スレッド終了フラグのセット
	void WorkThreadEx::pImplEx::SetThreadExitFlag(bool Setflag)
	{
//		(Setflag == true) ?  (ThreadFlag = ThreadFlag | 0x01) : (ThreadFlag = ThreadFlag & (~0x01));

	};

	//セット関数の終了フラグ(途中でセット内容を変えたい場合に使用。)
	void WorkThreadEx::pImplEx::SetChangeSetFuncFlag(bool Setflag)
	{
		(Setflag == true) ?  (ThreadFlag = ThreadFlag | 0x04) : (ThreadFlag = ThreadFlag & (~0x04));
	};

	//キューアンセットフラグのセット
	void WorkThreadEx::pImplEx::SetQueueUnsetFlag(bool Setflag)
	{
		(Setflag == true) ?  (ThreadFlag = ThreadFlag | 0x08) : (ThreadFlag = ThreadFlag & (~0x08));
	};

	//サスペンド状態かどうかのフラグセット
	void WorkThreadEx::pImplEx::SetThreadStatus_Suspend(bool Setflag)
	{
		(Setflag == true) ?  (ThreadFlag = ThreadFlag | 0x10) : (ThreadFlag = ThreadFlag & (~0x10));
	};


	//キューのあんせっと
	void WorkThreadEx::pImplEx::InnerUnsetQueue(void)
	{
		FuncQueue_ = 0;
		SetQueueUnsetFlag(false);
	};

	//キューポインタをセットします。
	void WorkThreadEx::pImplEx::SetFunctionQueue(SonikLib::SonikAtomicQueue<SonikLib::NormalSmtPtr<SonikThreadPack::ThreadPack>>* pSetQueue)

	{
		atmlock_.lock();

		FuncQueue_ = pSetQueue;

		atmlock_.Unlock();
	};

	//キューポインタをアンセットします。
	void WorkThreadEx::pImplEx::UnSetFunctionQueue(void)
	{
		ThreadFlag |= 0x08;

		while( (ThreadFlag & 0x08) != 0 );

	};


};

namespace SonikLib
{

	//============================================================================================
	//Implクラスと外部をつなぐクラス実装
	//============================================================================================
	//本クラスのコンストラクタです。
	WorkThreadEx::WorkThreadEx(bool DetachThread)
	{
		ImplObject = 0;

		try
		{
			try
			{
				ImplObject = new WorkThreadEx::pImplEx(DetachThread);

			}catch(std::bad_alloc& e)
			{
				throw -1;
			};
		}catch(...)
		{
			throw -1;
		};
	};

	//本クラスのデストラクタです。
	WorkThreadEx::~WorkThreadEx(void)
	{
//		if(ImplObject != 0)
//		{
//			delete ImplObject;
//		};

	};

	//関数オブジェクトポインタをセットします。
	//引数1: スレッドで実行する関数オブジェクトを設定します。
	//引数2: 指定した作成オブジェクトへのポインタを
	//		 new演算子より作成した場合にコール終了後にデリートするかのフラグを指定します。
	//		 ローカルで直接作成して指定した場合にデリートフラグをtrueにした場合、そのままdeletがコールされますが
	//		 動作は未定義です。 deleteをコール後実行してほしい場合はtrue, してほしくない場合はfalseを指定します。
	//		 デフォルトはfalseです。
	//戻り値; スレッドが実行中の場合はfalseが返り、セットされません。
	//		  そのままnewで指定した場合はフラグがfalseの場合はdeleteされません。(メモリリークの危険)
	//このメソッドがfalseで返ってきた場合、deleteFlag設定は無視されます。(deleteされません)
	//本関数はスレッドセーフです。
	//確実にセットしたい場合、前にセットされた関数があれば、それが終了し、関数がtrueを返却するまでループします。
	//別途QUEUEがセットされている場合、この関数は必ずfalseを返却します。
	//マルチスレッドにより、同時にキューセットと本関数が呼ばれた場合で、本関数が先にコールされた場合、本関数は、trueを返却します。
	bool WorkThreadEx::SetCallFunction(SonikLib::SonikFOSInterface* CallFunctionObject, bool DeleteFlag)
	{
		return true;//ImplObject->SetCallFunction(CallFunctionObject, DeleteFlag);
	};
	bool WorkThreadEx::SetCallFunction(SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface> CallFunctionObject, bool DeleteFlag)
	{
		return true;//ImplObject->SetCallFunction(CallFunctionObject, DeleteFlag);
	};

	//外部のキューをセットします。
	//本関数はSetCallFunctionと同時にコールされた場合で、SetCallFunctionが先に実行された場合、セットされた関数が終了するまで処理を返却しません。
	//本関数によりキューがセットされた後は、SetCallFunctionは無効となり、常にfalseを返却します。
	//本関数でセットしたキューにエンキューを行った場合、dispatchQueue関数をコールし、エンキューを行ったことを通知しなければデキュー処理を行いません。
	void WorkThreadEx::Set_ExternalQueue(SonikLib::SonikAtomicQueue<SonikLib::NormalSmtPtr<SonikThreadPack::ThreadPack>>* pSetQueue)
	{
//		ImplObject->SetFunctionQueue(pSetQueue);
	};

	//外部のキューをアンセットします。
	void WorkThreadEx::UnSet_ExternalQueue(void)
	{
//		ImplObject->UnSetFunctionQueue();
	};

	//スレッドにデキューの開始を通知します。
	void WorkThreadEx::dispatchDeQueue(void)
	{
//		ImplObject->GetConditionVariable().notify_one();
	};

	//スレッド実行中に設定を変更したい場合に使う関数群========
	//デリートフラグを ON にします。 SetCalFunction（）の設定をfalseにし、後に変更したくなった場合に使用します。
	//現在のファンクションが終了し、判定箇所に来た場合に実行されます。
	//設定関数実行後、判定箇所をスレッドが通過済みの場合、次の設定関数コール終了後に判定が行われます。
	void WorkThreadEx::SetFunctionDeleteFlagOn(void)
	{
//		ImplObject->SetFunctionDeleteFlag(true);
	};

	//スレッドの終了フラグをOnにします。
	//これはSetFunctionDeleteFlagOn()関数と同様の判定方法を行います。
	//よって、即時に終了されるわけではありません。
	void WorkThreadEx::SetThreadExitFlagOn(void)
	{
//		ImplObject->SetThreadExitFlag(true);
	};

	//現在のスレッドがサスペンド状態にあるかどうかを取得します。
	//稼働中であればfalse, サスペンド状態であればTrueを返却します。
	bool WorkThreadEx::GetThreadStatusSuspend(void)
	{
//		if( ( ImplObject->GetThreadFlag() & (0x10) ) != 0 )
//		{
//			return true;
//		};

		return false;
	};




}; //end namespace
