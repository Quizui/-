/*
 * SonikWorkThreadManagerEx.h
 *
 *  Created on: 2015/09/24
 *      Author: SONIK
 */

#ifndef SONIKWORKTHREADMANAGEREX_H_
#define SONIKWORKTHREADMANAGEREX_H_

#include "../SmartPointer/SonikSmartPointer.hpp"
#include "../FunctionObject/FunctionObjectSystemImpl.hpp"
#include "../Container/SonikAtomicQueue.hpp"
#include "../SonikCAS/SonikAtomicLock.h"
#include "SonikWorkThreadEx.h"

namespace SonikLib
{
	class SonikThreadManagerEx
	{
	private:
		//管理スレッド数
		uint32_t ManagedThreadNum;
		//スレッドプール
		SonikLib::WorkThreadEx* m_pThreads;
		//ジョブキュー(MTロックフリー)
		SonikAtomicQueue<SonikLib::SharedSmtPtr<SonikLib::SonikFOSInterface>>* JobQueue;

	private:
		//コピーとムーブの禁止
		SonikThreadManagerEx(const SonikThreadManagerEx& _copy_) = delete;
		SonikThreadManagerEx(SonikThreadManagerEx&& _move_) = delete;
		SonikThreadManagerEx& operator =(const SonikThreadManagerEx& _copy_) = delete;
		SonikThreadManagerEx& operator =(SonikThreadManagerEx&& _move_) = delete;


	public:
		//コンストラクタ
		SonikThreadManagerEx(void);
		//デストラクタ
		~SonikThreadManagerEx(void);

		//イニシャライザ
		bool Initialize(uint32_t UseThreadNum =2, uint32_t JobBufferSize =1200);

		//スレッド数の取得
		uint32_t Get_ManagedThreadNum(void);

	}; //end class


};



#endif /* SONIKWORKTHREADMANAGEREX_H_ */
