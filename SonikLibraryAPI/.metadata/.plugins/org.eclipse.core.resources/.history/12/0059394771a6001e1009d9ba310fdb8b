/*
 * SonikWorkThreadEx.h
 *
 *  Created on: 2015/09/23
 *      Author: SONIK
 */

#ifndef SONIKWORKTHREADEX_H_
#define SONIKWORKTHREADEX_H_

/*
 * このクラスはC++11のスレッドクラスを使用して
 * 一つのスレッドプールを形成するクラスです。
 * C++11対応コンパイラでないとコンパイル不可能です。
 *
 * また、実装はImpleイディオムにより隠蔽しています。
 *
 * 作成者の
 * コンパイル環境はEclipse + MINGW 32bit clang3.6.0コンパイラです。
 * gcc version 4.9.2 compiling
 *
 */

//#include "SonikThreadPack.h"
#include "../SmartPointer/SonikSmartPointer.hpp"
#include "../Container/SonikAtomicQueue.hpp"

namespace std
{
	class condition_variable;
}

namespace SonikFunctionObjectDefines
{
	class FunctionObjectSystemInterface;
};
namespace SonikLib
{
using SonikFOSInterface = SonikFunctionObjectDefines::FunctionObjectSystemInterface;
};

namespace SonikLib
{
	class WorkThreadEx
	{
	private:
		class pImplEx;
		pImplEx* ImplObject;

	public:

		//本クラスのコンストラクタです。
		WorkThreadEx(bool DetachThread = false);

		//本クラスのデストラクタです。
		~WorkThreadEx(void);

		//関数オブジェクトポインタをセットします。
		//引数1: スレッドで実行する関数オブジェクトを設定します。
		//引数2: 指定した作成オブジェクトへのポインタを
		//		 new演算子より作成した場合にコール終了後にデリートするかのフラグを指定します。
		//		 ローカルで直接作成して指定した場合にデリートフラグをtrueにした場合、そのままdeletがコールされますが
		//		 動作は未定義です。 deleteをコール後実行してほしい場合はtrue, してほしくない場合はfalseを指定します。
		//		 デフォルトはfalseです。
		//戻り値; スレッドが実行中の場合はfalseが返り、セットされません。
		//		  そのままnewで指定した場合はフラグがfalseの場合はdeleteされません。(メモリリークの危険)
		//このメソッドがfalseで返ってきた場合、deleteFlag設定は無視されます。(deleteされません)
		//本関数はスレッドセーフです。
		//確実にセットしたい場合、前にセットされた関数があれば、それが終了し、関数がtrueを返却するまでループします。
		//別途QUEUEがセットされている場合、この関数は必ずfalseを返却します。
		//マルチスレッドにより、同時にキューセットと本関数が呼ばれた場合で、本関数が先にコールされた場合、本関数は、trueを返却します。
		bool SetCallFunction(SonikLib::SonikFOSInterface* CallFunctionObject, bool DeleteFlag = false);
		bool SetCallFunction(SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface> CallFunctionObject, bool DeleteFlag = true);

		//外部のキューをセットします。
		//本関数はSetCallFunctionと同時にコールされた場合で、SetCallFunctionが先に実行された場合、セットされた関数が終了するまで処理を返却しません。
		//本関数によりキューがセットされた後は、SetCallFunctionは無効となり、常にfalseを返却します。
		//本関数でセットしたキューにエンキューを行った場合、dispatchQueue関数をコールし、エンキューを行ったことを通知しなければデキュー処理を行いません。
		void Set_ExternalQueue(SonikLib::SonikAtomicQueue<SonikLib::NormalSmtPtr<SonikLib::SonikFOSInterface>>* pSetQueue);

		//外部のキューをアンセットします。
		void UnSet_ExternalQueue(void);

		//スレッドにデキューの開始を通知します。
		void dispatchDeQueue(void);

		//スレッド実行中に設定を変更したい場合に使う関数群========
		//デリートフラグを ON にします。 SetCalFunction（）の設定をfalseにし、後に変更したくなった場合に使用します。
		//現在のファンクションが終了し、判定箇所に来た場合に実行されます。
		//設定関数実行後、判定箇所をスレッドが通過済みの場合、次の設定関数コール終了後に判定が行われます。
		void SetFunctionDeleteFlagOn(void);

		//スレッドの終了フラグをOnにします。
		//これはSetFunctionDeleteFlagOn()関数と同様の判定方法を行います。
		//よって、即時に終了されるわけではありません。
		void SetThreadExitFlagOn(void);

		//現在のスレッドがサスペンド状態にあるかどうかを取得します。
		//稼働中であればfalse, サスペンド状態であればTrueを返却します。
		bool GetThreadStatusSuspend(void);

	};

};



#endif /* SONIKWORKTHREADEX_H_ */
