/*
 * SonikMathDistance.cpp
 *
 *  Created on: 2015/08/17
 *      Author: SONIK
 */

#include "SonikMathDistance.h"

#include <cstdint>

namespace SonikMath
{
	//=====================================
	//					Sonik3DPoint Implement
	//=====================================
	Sonik3DPoint::Sonik3DPoint(double _x_, double _y_, double _z_)
	:m_x(_x_)
	,m_y(_y_)
	,m_z(_z_)
	{

	};

	Sonik3DPoint::~Sonik3DPoint(void)
	{

	};

	//本クラスと引数で指定されたオブジェクト或いは座標との距離を算出します。
	double Sonik3DPoint::Distance(const Sonik3DPoint& _point_);
	double Sonik3DPoint::Distance(const double& _x_, const double& _y_, const double& _z_);
	double Sonik3DPoint::Distance(const double* _x_, const double* _y_, const double* _z_);


	//=====================================
	//					SonikBazierBox Implement
	//=====================================
	//ベジェ曲線の位置点を算出します。(float版)
	//引数1: ベジェ曲線の設定クラスである、BazierBoxクラスに任意の値を設定して指定します。
	//引数2: 結果であるX値を格納するために変数を指定します。
	//引数3: 結果であるY値を格納するために変数を指定します。
	//引数4: 始点から終点までの総合フレームの中で、何フレーム目の値を取得するのかを指定します。
	void Bezier_curveLineF(const SonikMathDataBox::BazierBoxF& StateBox, float& GetX, float& GetY, float GetFrame)
	{
		float time = 0.0f;

		if(StateBox.Elapsed_Frame < GetFrame)
		{
			time = 1.0f;
		}else
		{
			time = GetFrame * (1 * StateBox.Elapsed_Frame);
		};

		GetX = ((1.0f - time) * (1.0f - time) * StateBox.StartX) + (2 * (1.0f - time) * time * StateBox.PivotX) + (time * time * StateBox.EndX);
		GetY = ((1.0f - time) * (1.0f - time) * StateBox.StartY) + (2 * (1.0f - time) * time * StateBox.PivotY) + (time * time * StateBox.EndY);
	};


};

