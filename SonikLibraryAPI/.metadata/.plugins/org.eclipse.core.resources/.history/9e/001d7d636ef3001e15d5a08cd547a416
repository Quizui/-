/*
 * SonikWorkThreadManagerEx.cpp
 *
 *  Created on: 2015/09/24
 *      Author: SONIK
 */

#include "SonikWorkThreadManagerEx.h"

#include <new>
#include <condition_variable>

namespace SonikLib
{
	//コンストラクタ
	SonikThreadManagerEx::SonikThreadManagerEx(void)
	:ManagedThreadNum(0)
	,m_pThreads(nullptr)
	{

	};

	//デストラクタ
	SonikThreadManagerEx::~SonikThreadManagerEx(void)
	{
		//スレッド始末。
		if( m_pThreads != nullptr )
		{
			for(uint32_t i=0; i < ManagedThreadNum; ++i)
			{
				delete m_pThreads[i];
			};

		};


	};

	//クリエイタ
	bool SonikThreadManagerEx::CreateThraedManager(SonikLib::SharedSmtPtr<SonikThreadManagerEx> _out_mng_, uint32_t UseThreadNum, uint32_t JobBufferSize)
	{
		SonikThreadManagerEx* lp_mngobj = new(std::nothrow) SonikThreadManagerEx;
		if(lp_mngobj == nullptr)
		{
			return false;
		};

		lp_mngobj->ManagedThreadNum = UseThreadNum;

		if(!lp_mngobj->m_cond.ResetPointer(new(std::nothrow) std::condition_variable_any))
		{
			delete lp_mngobj;
			return false;
		};
		if(lp_mngobj->m_cond.IsNullptr())
		{
			delete lp_mngobj;
			return false;
		};

		if( !lp_mngobj->JobQueue.ResetPointer(new(std::nothrow) SonikLib::SonikAtomicQueue<SonikLib::SharedSmtPtr<SonikLib::SonikFOSInterface>>(JobBufferSize)) )
		{
			return false;
		};
		if( lp_mngobj->JobQueue.IsNullptr() )
		{
			return false;
		};

		lp_mngobj->m_pThreads = new(std::nothrow)  SonikLib::WorkThreadEx*[UseThreadNum]{};
		if( lp_mngobj->m_pThreads == nullptr )
		{
			delete lp_mngobj;
			return false;
		};

		for(uint32_t i=0; i < UseThreadNum; ++i)
		{
			lp_mngobj->m_pThreads[i] = new(std::nothrow) SonikLib::WorkThreadEx(lp_mngobj->m_cond);
			if( lp_mngobj->m_pThreads[i] == nullptr)
			{
				delete lp_mngobj;
				return false;
			};
		};

		if( !_out_mng_.ResetPointer(lp_mngobj) )
		{
			delete lp_mngobj;
			return false;
		};

		return true;
	};

	//スレッド数の取得
	uint32_t SonikThreadManagerEx::Get_ManagedThreadNum(void)
	{
		return ManagedThreadNum;
	};

};//end namespace;
