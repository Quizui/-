/*
 * SonikAudio_Implement.cpp
 *
 *  Created on: 2023/05/23
 *      Author: owner
 */


//#include "../PlatformInterface/PlatformAudioInterface.h"
//#include "../PlatformInterface/PlatformAudioPlayerInterface.h"

#include <new>

#include "SonikAudio_Implement.h"
//#include "SonikAudioPlayer_inherit.h"
#include "../Task/AudioPlayerTaskManager.h"
#include "../Mixer/SonikAudio_Mixer.h"
#include "../Player/SonikAudioPlayer.h"
#include "../Player/SonikAudioPlayer_ControlData.h"
#include "../Listener/SonikAudioListener.h"


namespace SonikAudio
{
	SonikAudio_Implement::SonikAudio_Implement(void)
	:SamlingType(SonikAudio::SCVType::B16_CH1_SR44100)
	,mp_Mixer(nullptr)
	{
		//no_process;
	};

	SonikAudio_Implement::~SonikAudio_Implement()
	{
		//廃棄処理
		/*uintptr_t func_ = 0;
		func_ = m_handle->GetDllProcAddress("PlatFormDelete");

		(*reinterpret_cast<void(*)(void)>(func_))();
		*/

		m_TaskMng.ResetPointer(nullptr);

		if( mp_Mixer != nullptr )
		{
			delete mp_Mixer;
		}

		//PlatFormInterfaceのライフサイクル管理はAudioInterfaceの管轄のため
		//ここでDeleteコール。
		uintptr_t func_ = 0;
		func_ = m_platformHandle->GetDllProcAddress("PlatFormDelete");

		(*reinterpret_cast<void(*)(void)>(func_))();

	};

	bool SonikAudio_Implement::Initialize(uint32_t Set_Sampletype, SonikAudioPlatForm::SonikPlatformAudioInterface* Set_PFI_Pointer, SonikLib::SDllHandle SetHandle)
	{
		//m_pfi = Set_PFI_Pointer;
		//m_handle = SetHandle;
		SamlingType = static_cast<SonikAudio::SCVType>(Set_Sampletype);

		//リスナ生成。
		SonikAudio::SonikAudioListener* lp_listener = new(std::nothrow) SonikAudio::SonikAudioListener();

		SonikAudioPlayerTask::SonikAudioPlayerTaskManager* l_mng = nullptr;
		l_mng = new(std::nothrow) SonikAudioPlayerTask::SonikAudioPlayerTaskManager;
		if(l_mng == nullptr)
		{
			uintptr_t func_ = 0;
			func_ = SetHandle->GetDllProcAddress("PlatFormDelete");
			(*reinterpret_cast<void(*)(void)>(func_))();

			return false;
		};

		if( !l_mng->Initialize(1000) )
		{
			delete l_mng;

			uintptr_t func_ = 0;
			func_ = SetHandle->GetDllProcAddress("PlatFormDelete");
			(*reinterpret_cast<void(*)(void)>(func_))();

			l_mng = nullptr;
			return false;
		};

		SonikAudio::SonikAudioMixer* l_mixer = nullptr;
		l_mixer = new(std::nothrow) SonikAudio::SonikAudioMixer();
		if( l_mixer == nullptr )
		{
			delete l_mng;

			uintptr_t func_ = 0;
			func_ = SetHandle->GetDllProcAddress("PlatFormDelete");
			(*reinterpret_cast<void(*)(void)>(func_))();

			l_mng = nullptr;
			return false;
		};

		uint32_t _samplingrate = (Set_Sampletype & 0x000000FF) * 1000;
		if(_samplingrate == 44000)
		{
			_samplingrate += 100;
		};

		uint32_t _bit = ((Set_Sampletype & 0x00FF0000) >> 16);
		uint16_t _ch = ((Set_Sampletype & 0x0000FF00) >> 8);

		if( !l_mixer->Initialize(1000, _bit, _ch, _samplingrate, Set_PFI_Pointer))
		{
			delete l_mixer;
			delete l_mng;

			uintptr_t func_ = 0;
			func_ = SetHandle->GetDllProcAddress("PlatFormDelete");
			(*reinterpret_cast<void(*)(void)>(func_))();

			l_mixer = nullptr;
			l_mng = nullptr;
			return false;
		};

		m_TaskMng.ResetPointer(l_mng);
		mp_Mixer = l_mixer;
		m_platformHandle = SetHandle;

		return true;
	};


	//オーディオファイルをロードしてAudioPlayerを作成できるようにセットします。
	bool SonikAudio_Implement::LoadAudio(const char* AudioFilePath, uint32_t SetAudioID)
	{
		SonikAudio::SAudioFormat _audio;

		if( !SonikAudioLoadFunction::Load_WaveFile(AudioFilePath, _audio, SamlingType, true) )
		{
			return false;
		};

		if( !audiomap.insert( std::map<unsigned long, SonikAudio::SAudioFormat>::value_type(SetAudioID, _audio) ).second )
		{
			//Key重複
			return false;
		};

		return true;
	};

	//オーディオプレイヤー(コントローラ)作成
	bool SonikAudio_Implement::CreateAudioPlayer(uint32_t AudioID, SonikAudio::SAudioPlayer& GetPlayer)
	{
		SonikAudio::SonikAudioPlayer* l_player = nullptr;
		SonikAudioData::SonikAudioControlData* l_apdata = nullptr;
		SonikAudioPointer::SonikAudioInterfaceSmtPtr<SonikAudioData::SonikAudioControlData> apdata_smtptr;
		decltype(audiomap)::iterator _it;


		_it = audiomap.find(AudioID);
		if( _it == audiomap.end() )
		{
			//ID無し。
			return false;
		};

		l_apdata = new(std::nothrow) SonikAudioData::SonikAudioControlData(_it->second);
		if( l_apdata == nullptr )
		{
			return false;
		};

		apdata_smtptr.ResetPointer(l_apdata);

		SonikAudioPointer::SonikAudioInterfaceSmtPtr<SonikAudioDataInterface::SADInterface_PlayerSide> _player_arg_f;
		SonikAudioPointer::SonikAudioInterfaceSmtPtr<SonikAudioTaskInterface::SonikAudioPlayerTaskManagerInterface> _player_arg_s;

		SonikAudioPointer::SmtPtrUpCast(apdata_smtptr, _player_arg_f);
		SonikAudioPointer::SmtPtrUpCast(m_TaskMng, _player_arg_s);

		l_player = new(std::nothrow) SonikAudio::SonikAudioPlayer(_player_arg_f, _player_arg_s);
		if( l_player == nullptr )
		{
			//l_apdataはスマートポインタに格納されているためdelete省略。

			return false;
		}

		//ControlDataを登録
		if( !ap_Data.insert( std::map<uint64_t, SonikAudioPointer::SonikAudioInterfaceSmtPtr<SonikAudioData::SonikAudioControlData>>::value_type(apdata_smtptr->Get_UniqueID(), apdata_smtptr) ).second )
		{
			//Key重複

			delete l_player;
			return false;
		};

		mp_Mixer->AddAudio(apdata_smtptr);

		//すべて完了したので返却。
		GetPlayer.ResetPointer(l_player);

		return true;
	};

	//ハードウェア情報を取得します。
	bool SonikAudio_Implement::GetAudioHardwareInfo(void)
	{
		return true;
	};


};
