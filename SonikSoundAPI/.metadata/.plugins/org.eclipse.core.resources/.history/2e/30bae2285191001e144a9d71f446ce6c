/*
 * open_al_interface.h
 *
 *  Created on: 2020/04/25
 *      Author: SONIC
 */

#ifndef OPEN_AL_INTERFACE_H_
#define OPEN_AL_INTERFACE_H_

#include "./PlatformInterface/PlatformAudioInterface.h"
#include "../Functions/LoadFunction.h"
#include "../../DllAccess/SonikDllAccessManager.h"

#include "../AL/al.h"
#include "../AL/alc.h"
#include "../AL/alext.h"
#include "../AL/efx.h"
#include "../AL/efx-creative.h"
#include "../AL/efx-presets.h"

#include <map>
#include <vector>

namespace SonikLib
{
	class WorkThreadEx;
};

namespace AudioPlatformInterface
{
	class OpenALInterface : public SonikAudioPlatForm::SonikPlatformAudioInterface
	{
	private:
		//OpenALSoftへのDLLハンドル
		SonikLib::SDllHandle m_openal;

		//バッファースワップ処理用スレッド
		SonikLib::WorkThreadEx* m_thread;

		//必要なデバイスやコンテキスト
		ALCdevice* m_dev;
		ALCcontext* m_context;

		//バッファカウント
		unsigned long buffer_cnt;
		//OpenALバッファ
		ALuint* m_buffers;
		//OpenALバッファインデックス。
		int32_t m_bufferindex;
		//OpenALソース
		ALuint m_source;

		//SamlingRateタイプ
		SonikAudio::SCVType SamlingType;
		//ALFORMAT ストリーミング再生のときに必要。
		ALenum m_format;
		//サンプリングレート。これもストリーミング再生に必要。タイプから一回一回計算するのめんどくさい。
		uint32_t m_samplingRate;

		//ストリーミング再生に必要な再生用関数(一回一回取得するのめんどくさいので。)
		void(*m_dataBufferfunc)(ALuint, ALenum, const ALvoid*, ALsizei, ALsizei);
		void(*m_Queuefunc)(ALuint, ALsizei, ALuint*);
		void(*m_UnQueuefunc)(ALuint, ALsizei, ALuint*);
		void(*m_GetSource_i_func)(ALuint, ALenum, ALint*);


	public:
		//Constructor
		OpenALInterface(void);
		~OpenALInterface(void);

		//イニシャライザ
		bool InterfaceInitialize(char* DllPath, unsigned long SetBit, unsigned long SetSampling, unsigned long SetCh);
		//クリアOpenAL(デストラクタじゃ動かないので)
		bool ClearAL(void);

		//Pure Virtual Function
		//オーディオの再生を行います。
		void PlayAudio(const char* AudioData, unsigned long long AudioDataSize);

	};

}


#endif /* OPEN_AL_INTERFACE_H_ */
